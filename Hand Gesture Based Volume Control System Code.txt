import cv2
import mediapipe as mp
import numpy as np
import math
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
Initialize MediaPipe
mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils
 
Webcam
cap = cv2.VideoCapture(0)
Volume control
devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
volume = cast(interface, POINTER(IAudioEndpointVolume))
volRange = volume.GetVolumeRange()
minVol, maxVol = volRange[0], volRange[1]
while True:
  success, img = cap.read()
  imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  result = hands.process(imgRGB)
  lmList = []
  if result.multi_hand_landmarks:
    for handLms in result.multi_hand_landmarks:
      for id, lm in enumerate(handLms.landmark):
        h, w, c = img.shape
        cx, cy = int(lm.x * w), int(lm.y * h)
        lmList.append((id, cx, cy))
mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)
 
  if lmList:
    # Thumb tip: id 4, Index finger tip: id 8
    x1, y1 = lmList[4][1], lmList[4][2]
    x2, y2 = lmList[8][1], lmList[8][2]
    cv2.circle(img, (x1, y1), 10, (255, 0, 0), cv2.FILLED)
    cv2.circle(img, (x2, y2), 10, (255, 0, 0), cv2.FILLED)
    cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 3)
 
    length = math.hypot(x2 - x1, y2 - y1)
 
    # Convert length to volume range
    vol = np.interp(length, [30, 200], [minVol, maxVol])
    volume.SetMasterVolumeLevel(vol, None)
 
    # Display volume bar
    volBar = np.interp(length, [30, 200], [400, 150])
    cv2.rectangle(img, (50, 150), (85, 400), (0, 255, 0), 3)
    cv2.rectangle(img, (50, int(volBar)), (85, 400), (0, 255, 0), cv2.FILLED)
 
  cv2.imshow("Hand Gesture Volume Control", img)
  if cv2.waitKey(1) &0xFF == ord('q'):
    break
